====CPSC338/EENG348 Digital Systems Lab 1 Submission====
Completed by Ivy Fan (ivf3) and Bradley Yam (by87)

This lab is broken up into three parts, which correspond to the folders
sketch_part1, sketch_part2, and sketch_part3. The code for each part is
found in the folder. The rest of the readme will expand on the expected 
behaviour of the functions in each part, as well as their stack representations.

sketch_part1:

testasm(unsigned char a, unsigned char b); adds the numerical value of both 
a and b together. testasm does not push any registers onto the stack. Moreover,
testasm uses the add instruction and branches on the carry flag, rather than 
using the adc instruction. 

sketch_part2:

unsigned int sum_and_diff (unsigned char a, unsigned char b) takes the sum of
a and b and adds the absolute difference of a and b to it. The end result 
algebraically should be, assuming without loss of generality that a > b, is 
(a + b) + (a - b) = 2a. 

sum_and_diff calls sub-functions in assembly "start_of_sum" and "start_of_diff".
the main function does not push anything onto the stack, and "start_of_sum" 
returns (a + b) in r24, r25. but "start_of_diff" uses r24 and r22 to receive arguments
and returns (a - b) in r24, r25. Before "start_of_diff" is called, the main function 
pushes the return values from start_of_sum onto the stack, shown below. Then it calls
"start_of_diff".

\______________/
|  ret addr    |
|______________|
|(a+b) low bits|
|______________|
|(a+b) hi  bits|
|______________|<- stack pointer (in main function)
/              \

After "start_of_diff" is called, the program counter from when it is called is 
also pushed onto the stack.

\______________/
|  ret addr    |
|______________|
|(a+b) low bits|
|______________|
|(a+b) hi  bits|
|______________|
|  ret addr 2  |
|______________|<- stack pointer (in start_of_diff)
/              \

After start_of_diff returns to the main function, the stack frame looks as follows:

\______________/
|  ret addr    |
|______________|
|(a+b) low bits|
|______________|
|(a+b) hi  bits|
|______________|<- stack pointer (in main function)
|  ret addr 2  |
|______________|
/              \

In the main function, the hi bits of (a+b) are popped into r25 and the low bits
are popped off the stack into the scratch register r0. The low bits are added
with the result of (a-b) in r24, and the carry bit is added to r25 using the adc
instruction. The stack frame at this point looks like this: 
\______________/
|  ret addr    |
|______________|<- stack pointer (in main function)
/              \


sketch_part3:

unsigned int fib (unsigned char n) is a recursive function that outputs the nth
fibonacci series number, for fib(n) < 255.

On entry to fib_recurse from the main function, the stack frame looks like this:
\______________/
|  ret addr    |
|   of main    |
|______________|<- stack pointer (in fib_recurse(n))
/              \

fib_recurse pushes the value of the argument received, n, onto the stack, and
then calls fib(n-1), which results in the following stack frame:

\______________/
|  ret addr    |
|   of main    |
|______________|
|  n           |
|______________|
|  ret addr    |
|  of fib(n)   |
|______________|<- stack pointer (in fib_recurse(n-1))
/              \

If the value of n in r24 is less than two, the program simply returns the value of n.
Otherwise, it stores n on the stack and calls fib on (n-1). It continues until n = 2.
The stack will look like this after a series of fib(n-1) calls:

\______________/
|  ret addr    |
|______________|
|  n           |
|______________|
|  ret addr 2  |
|______________|
|  n - 1       |
|______________|
    ...
 ______________
|  2           |
|______________|<- stack pointer in fib_recurse(2)
/              \

As each stack frame is popped off the stack, the fib(n) of each stack frame is returned
in r24. These are summed together so that f(n) = f(n-1) + f(n-2). In between the call to 
fib(n-1) and fib(n-2), we pop the stored value of n off into r24 to use again and push
the return value from fib(n-1) to the stack:


\______________/
|  ret addr    |
| of main      |
|______________|
| ret value of |
|  fib(n - 1)  |
|______________|<- stack pointer in fib(n)
/              \

Then fib(n) calls fib(n-2):

\______________/
|  ret addr    |
| of main      |
|______________|
| ret value of |
|  fib(n - 1)  |
|______________|
| ret addr of  |
| fib(n)       |
|______________|<- stack pointer in fib(n-2)
/              \

After fib(n-2) returns to fib(n), fib(n) pops the stored value of fib(n-1) from the 
stack and adds the returned values from fib(n-1) and fib(n-2). 

\______________/
|  ret addr    |
|   of main    |
|______________|<- stack pointer (in fib_recurse(n))
/              \

